<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Summarize - InstantBrief</title>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&family=Orbitron:wght@400;700;800;900&display=swap" rel="stylesheet">
  <style>
    body { margin:0; font-family:'Inter',sans-serif; background:#fff; color:#111; line-height:1.6; transition:background 0.3s, color 0.3s; }
    header { position:sticky; top:0; background:#fff; border-bottom:1px solid #eee; width:100%; transition:background 0.3s; z-index:1000; }
    nav { padding:20px 60px; display:flex; justify-content:space-between; align-items:center; width:100%; box-sizing:border-box; }
    .logo { font-family:'Orbitron',monospace; font-size:2.2em; font-weight:900; color:#000; text-decoration:none; display:flex; align-items:center; gap:15px; letter-spacing:2px; text-transform:uppercase; }
    .logo img { height:96px; width:auto; }
    .menu { display:flex; align-items:center; gap:30px; }
    .menu a { text-decoration:none; color:#333; font-weight:500; transition:.2s; }
    .menu a:hover { color:#000; }
    .toggle-switch { position: relative; width: 40px; height: 20px; }
    .toggle-switch input { opacity: 0; width: 0; height: 0; }
    .toggle-switch label { position: absolute; cursor: pointer; background-color: #ccc; border-radius: 20px; width: 100%; height: 100%; transition: background-color 0.3s; }
    .toggle-switch label::before { content: ""; position: absolute; left: 2px; top: 2px; width: 16px; height: 16px; background-color: white; border-radius: 50%; transition: transform 0.3s; }
    .toggle-switch input:checked + label { background-color: #000; }
    .toggle-switch input:checked + label::before { transform: translateX(20px); }
    
    .container { max-width:1200px; margin:0 auto; padding:40px 20px; }
    .page-title { text-align:center; margin-bottom:40px; }
    .page-title h1 { font-size:2.5em; font-weight:700; margin:0 0 10px; color:#000; transition:color 0.3s; }
    .page-title p { font-size:1.1em; color:#555; transition:color 0.3s; }
    
    .summarize-section { display:grid; grid-template-columns:1fr 1fr; gap:40px; margin-bottom:40px; }
    .input-panel, .output-panel { background:#fff; border:1px solid #000; border-radius:16px; padding:30px; transition:all 0.3s; }
    .input-panel { border-color:#000; }
    .output-panel { border-color:#ddd; }
    
    .panel-title { font-size:1.3em; font-weight:600; margin-bottom:20px; color:#000; transition:color 0.3s; }
    
    .input-methods { display:flex; gap:10px; margin-bottom:20px; }
    .input-tab { padding:10px 20px; border:2px solid #eee; border-radius:8px; cursor:pointer; transition:all 0.3s; font-weight:500; }
    .input-tab.active { border-color:#000; background:#000; color:#fff; }
    .input-tab:hover { border-color:#333; }
    
    .input-content { display:none; }
    .input-content.active { display:block; }
    
    .text-input { width:100%; min-height:200px; padding:15px; border:2px solid #eee; border-radius:8px; font-family:'Inter',sans-serif; font-size:1em; resize:vertical; transition:border-color 0.3s; }
    .text-input:focus { outline:none; border-color:#000; }
    
    .file-upload { border:2px dashed #ddd; border-radius:8px; padding:40px; text-align:center; transition:all 0.3s; cursor:pointer; }
    .file-upload:hover { border-color:#000; background:#f9f9f9; }
    .file-upload.dragover { border-color:#000; background:#f5f5f5; }
    .file-upload input { display:none; }
    .file-upload-text { font-size:1.1em; color:#666; margin-bottom:10px; }
    .file-upload-sub { font-size:0.9em; color:#999; }
    
    .summarize-btn { background:#000; color:#fff; padding:15px 30px; border:none; border-radius:8px; font-weight:600; font-size:1em; cursor:pointer; transition:all 0.3s; margin-top:20px; width:100%; }
    .summarize-btn:hover { background:#333; }
    .summarize-btn:disabled { background:#ccc; cursor:not-allowed; }
    
    .output-content { min-height:200px; padding:20px; background:#f9f9f9; border-radius:8px; border:1px solid #eee; font-size:1em; line-height:1.6; transition:all 0.3s; }
    .output-content.empty { display:flex; align-items:center; justify-content:center; color:#999; font-style:italic; }
    
    .output-actions { display:flex; gap:10px; margin-top:20px; }
    .download-btn, .copy-btn { background:#000; color:#fff; padding:10px 20px; border:none; border-radius:8px; font-weight:500; cursor:pointer; transition:all 0.3s; }
    .download-btn:hover, .copy-btn:hover { background:#333; }
    .download-btn:disabled, .copy-btn:disabled { background:#ccc; cursor:not-allowed; }
    
    .loading { display:none; text-align:center; padding:20px; }
    .loading.active { display:block; }
    .spinner { border:3px solid #f3f3f3; border-top:3px solid #000; border-radius:50%; width:30px; height:30px; animation:spin 1s linear infinite; margin:0 auto 10px; }
    @keyframes spin { 0% { transform:rotate(0deg); } 100% { transform:rotate(360deg); } }
    
    .stats { display:grid; grid-template-columns:repeat(auto-fit, minmax(200px, 1fr)); gap:20px; margin-top:40px; }
    .stat-card { background:#f9f9f9; padding:20px; border-radius:12px; text-align:center; transition:all 0.3s; }
    .stat-number { font-size:2em; font-weight:700; color:#000; margin-bottom:5px; }
    .stat-label { font-size:0.9em; color:#666; }
    
    @media (max-width: 768px) {
      nav { padding:15px 20px; }
      .logo { font-size:1.8em; }
      .summarize-section { grid-template-columns:1fr; }
      .input-methods { flex-direction:column; }
      .output-actions { flex-direction:column; }
    }
    
    /* Dark mode styles */
    body.dark-mode { background:#111; color:#eee; }
    body.dark-mode header { background:#111; border-bottom-color:#444; }
    body.dark-mode .logo, body.dark-mode .menu a { color:#fff; }
    body.dark-mode .menu a:hover { color:#ddd; }
    body.dark-mode .page-title h1 { color:#fff; }
    body.dark-mode .page-title p { color:#ccc; }
    body.dark-mode .input-panel, body.dark-mode .output-panel { background:#222; border-color:#444; }
    body.dark-mode .input-panel { border-color:#fff; }
    body.dark-mode .panel-title { color:#fff; }
    body.dark-mode .input-tab { border-color:#444; color:#ccc; }
    body.dark-mode .input-tab.active { border-color:#fff; background:#fff; color:#000; }
    body.dark-mode .input-tab:hover { border-color:#666; }
    body.dark-mode .text-input { background:#333; border-color:#444; color:#fff; }
    body.dark-mode .text-input:focus { border-color:#fff; }
    body.dark-mode .file-upload { border-color:#444; }
    body.dark-mode .file-upload:hover { border-color:#fff; background:#333; }
    body.dark-mode .file-upload.dragover { border-color:#fff; background:#444; }
    body.dark-mode .file-upload-text { color:#ccc; }
    body.dark-mode .file-upload-sub { color:#999; }
    body.dark-mode .summarize-btn { background:#fff; color:#000; }
    body.dark-mode .summarize-btn:hover { background:#ddd; }
    body.dark-mode .output-content { background:#333; border-color:#444; color:#fff; }
    body.dark-mode .output-content.empty { color:#999; }
    body.dark-mode .download-btn, body.dark-mode .copy-btn { background:#fff; color:#000; }
    body.dark-mode .download-btn:hover, body.dark-mode .copy-btn:hover { background:#ddd; }
    body.dark-mode .stat-card { background:#222; }
    body.dark-mode .stat-number { color:#fff; }
    body.dark-mode .stat-label { color:#ccc; }
    body.dark-mode .spinner { border-color:#444; border-top-color:#fff; }
  </style>
</head>
<body>

<header>
  <nav>
    <a href="#" class="logo">
      <img src="instantlogo.png" alt="InstantBrief Logo">
      InstantBrief
    </a>
    <div class="menu">
      <a href="#home">Home</a>
      <div class="toggle-switch">
        <input type="checkbox" id="darkModeToggle" onchange="toggleDarkMode()">
        <label for="darkModeToggle"></label>
      </div>
    </div>
  </nav>
</header>

<div class="container">
  <div class="page-title">
    <h1>AI-Powered Text Summarization</h1>
    <p>Transform lengthy content into concise, actionable summaries in seconds</p>
  </div>
  
  <div class="summarize-section">
    <div class="input-panel">
      <h3 class="panel-title">Input Your Content</h3>
      
      <div class="input-methods">
        <div class="input-tab active" onclick="switchTab('text')">Text Input</div>
        <div class="input-tab" onclick="switchTab('file')">Upload File</div>
      </div>
      
      <div class="input-content active" id="text-input">
        <textarea class="text-input" placeholder="Paste your text here to summarize... (minimum 100 words recommended)" id="textArea"></textarea>
      </div>
      
      <div class="input-content" id="file-input">
        <div class="file-upload" onclick="document.getElementById('fileInput').click()" ondrop="handleDrop(event)" ondragover="handleDragOver(event)" ondragleave="handleDragLeave(event)">
          <input type="file" id="fileInput" accept=".txt,.pdf,.doc,.docx" onchange="handleFileSelect(event)">
          <div class="file-upload-text">Drop files here or click to upload</div>
          <div class="file-upload-sub">Supports: TXT, PDF, DOC, DOCX (Max 10MB)</div>
        </div>
      </div>
      
      <button class="summarize-btn" onclick="summarizeText()">
        <span id="btnText">Summarize Content</span>
      </button>
      
      <div class="loading" id="loading">
        <div class="spinner"></div>
        <div>Analyzing and summarizing your content...</div>
      </div>
    </div>
    
    <div class="output-panel">
      <h3 class="panel-title">Summary Output</h3>
      
      <div class="output-content empty" id="output">
        Your AI-generated summary will appear here...
      </div>
      
      <div class="output-actions">
        <button class="download-btn" onclick="downloadPDF()" disabled id="downloadBtn">
          ðŸ“„ Download PDF
        </button>
        <button class="copy-btn" onclick="copyToClipboard()" disabled id="copyBtn">
          ðŸ“‹ Copy Text
        </button>
      </div>
    </div>
  </div>
  
  <div class="stats">
    <div class="stat-card">
      <div class="stat-number" id="wordCount">0</div>
      <div class="stat-label">Words Processed</div>
    </div>
    <div class="stat-card">
      <div class="stat-number" id="summaryLength">0</div>
      <div class="stat-label">Summary Length</div>
    </div>
    <div class="stat-card">
      <div class="stat-number" id="compressionRatio">0%</div>
      <div class="stat-label">Compression Ratio</div>
    </div>
    <div class="stat-card">
      <div class="stat-number" id="processingTime">0s</div>
      <div class="stat-label">Processing Time</div>
    </div>
  </div>
</div>

<script>
let currentInput = '';
let summaryOutput = '';

function toggleDarkMode() {
  document.body.classList.toggle('dark-mode');
}

function switchTab(tab) {
  document.querySelectorAll('.input-tab').forEach(t => t.classList.remove('active'));
  document.querySelectorAll('.input-content').forEach(c => c.classList.remove('active'));
  
  document.querySelector(`[onclick="switchTab('${tab}')"]`).classList.add('active');
  document.getElementById(`${tab}-input`).classList.add('active');
}

function handleDragOver(e) {
  e.preventDefault();
  e.currentTarget.classList.add('dragover');
}

function handleDragLeave(e) {
  e.currentTarget.classList.remove('dragover');
}

function handleDrop(e) {
  e.preventDefault();
  e.currentTarget.classList.remove('dragover');
  const files = e.dataTransfer.files;
  if (files.length > 0) {
    handleFileSelect({target: {files: files}});
  }
}

function handleFileSelect(event) {
  const file = event.target.files[0];
  if (file) {
    if (file.size > 10 * 1024 * 1024) {
      alert('File size must be less than 10MB');
      return;
    }
    
    const reader = new FileReader();
    reader.onload = function(e) {
      currentInput = e.target.result;
      document.querySelector('.file-upload-text').textContent = `File loaded: ${file.name}`;
      document.querySelector('.file-upload-sub').textContent = `${(file.size / 1024).toFixed(1)} KB - Ready to summarize`;
    };
    reader.readAsText(file);
  }
}

function summarizeText() {
  const textInput = document.getElementById('textArea').value;
  const activeTab = document.querySelector('.input-tab.active').textContent;
  
  if (activeTab === 'Text Input') {
    currentInput = textInput;
  }
  
  if (!currentInput || currentInput.trim().length < 50) {
    alert('Please provide at least 50 characters of text to summarize.');
    return;
  }
  
  // Show loading state
  document.getElementById('loading').classList.add('active');
  document.querySelector('.summarize-btn').disabled = true;
  document.getElementById('btnText').textContent = 'Processing...';
  
  // Simulate API call
  setTimeout(() => {
    generateSummary(currentInput);
  }, 2000);
}

function generateSummary(text) {
  const startTime = Date.now();
  
  // Simple summarization simulation
  const sentences = text.match(/[^\.!?]+[\.!?]+/g) || [];
  const wordCount = text.split(/\s+/).length;
  
  // Take key sentences (this would be AI-powered in real implementation)
  const keyPoints = sentences.slice(0, Math.max(2, Math.ceil(sentences.length * 0.3)));
  summaryOutput = keyPoints.join(' ').trim();
  
  if (!summaryOutput) {
    summaryOutput = "Summary: " + text.substring(0, 300) + "...";
  }
  
  const endTime = Date.now();
  const processingTime = ((endTime - startTime) / 1000).toFixed(1);
  
  // Update output
  const outputDiv = document.getElementById('output');
  outputDiv.classList.remove('empty');
  outputDiv.textContent = summaryOutput;
  
  // Update stats
  const summaryWords = summaryOutput.split(/\s+/).length;
  const compressionRatio = Math.round((1 - summaryWords / wordCount) * 100);
  
  document.getElementById('wordCount').textContent = wordCount.toLocaleString();
  document.getElementById('summaryLength').textContent = summaryWords.toLocaleString();
  document.getElementById('compressionRatio').textContent = compressionRatio + '%';
  document.getElementById('processingTime').textContent = processingTime + 's';
  
  // Enable buttons
  document.getElementById('downloadBtn').disabled = false;
  document.getElementById('copyBtn').disabled = false;
  
  // Reset loading state
  document.getElementById('loading').classList.remove('active');
  document.querySelector('.summarize-btn').disabled = false;
  document.getElementById('btnText').textContent = 'Summarize Content';
}

function copyToClipboard() {
  navigator.clipboard.writeText(summaryOutput).then(() => {
    const btn = document.getElementById('copyBtn');
    const originalText = btn.textContent;
    btn.textContent = 'âœ“ Copied!';
    setTimeout(() => {
      btn.textContent = originalText;
    }, 2000);
  });
}

function downloadPDF() {
  // Simple PDF generation (in real implementation, use libraries like jsPDF)
  const element = document.createElement('a');
  const file = new Blob([summaryOutput], {type: 'text/plain'});
  element.href = URL.createObjectURL(file);
  element.download = 'summary.txt';
  document.body.appendChild(element);
  element.click();
  document.body.removeChild(element);
  
  // For actual PDF, you would use:
  // const pdf = new jsPDF();
  // pdf.text(summaryOutput, 10, 10);
  // pdf.save('summary.pdf');
}

// Initialize
document.addEventListener('DOMContentLoaded', function() {
  // Auto-expand textarea
  document.getElementById('textArea').addEventListener('input', function() {
    this.style.height = 'auto';
    this.style.height = (this.scrollHeight) + 'px';
  });
});
</script>

</body>
</html>
